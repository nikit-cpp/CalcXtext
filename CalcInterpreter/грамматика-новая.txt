http://ru.wikipedia.org/wiki/Расширенная_форма_Бэкуса_—_Наура
Терминалы записаны большими буквами, нетерминалы - маленькими.
Вместо некоторых терминалов (MUL, DIV, LP, ...) для наглядности
записаны соответствующие им лексемы, заключённые в '':
'*', '/', '(', ...
Начиная с символов '//' - и до конца строки - комметарий

В stricted-режимер для строки aa^2 + b^3 - log(x-1)
интерпретатор построит и вернёт тип polynom.
Тип vector используется для задания векторов, матриц, ...
Типы vector и polynom обрабатываются одними ф-ями,
однако тип polynom введён для того, чтобы отличаться от vector,
polynom используется для решения уравнений.
Вместе с polynom операторы '>', '<', '==', ... используются для задания уравнений.
Вместе с vector - по своему прямому назначению - для сравнения векторов

program = 
	{ instr } EXIT

instr = 
		';'
	|	if_
	|	do_
	|	while_
	|	void_func ';'
	|	sys_equations

block = 
		'{'	{ instr } '}'
	|	instr // ';' не нужен из-за if(1){if(2){}}
	
if_ =
	'if' '(' bool ')' block  [ 'else' block ]

while_ =
	'while' '(' bool ')' block
	
do_ =
	'do' block 'while' '(' bool ')' ';' 

// За счёт проверки типов 
sys_equations =
	bool { ',' bool } ';'
	
bool =
	rel { ( '==' | '!=' ) rel }

rel	=
	expr { ( '<' | '<=' | '>=' | '>' ) expr }
	
expr =
	term { ( '+' | '(+)' | '-' ) term }
	
term =
	persent { ( '*' | '/' ) persent }
	
// 100+100+2^3% == 216
persent =
	degree [ '%' ]

// 3!^2 == 36, 2^3^4 = 2^(3^4)
degree =
	factorial [ '^' degree ]

factorial =
	prim { '!' }
	
prim =
		NUM
	|	DOUBLE
	|	BOOLEAN
	|	vector // (1, 2, 3) или одновектор (4-1), что без вопросов приводится к int
	|	NAME [ right ]
	|	'-' prim
	
right =
		'=' bool // a=8-9*7, a = (1, 2, 3)
	|	func_arg // sin pi; sin 3.14
	|	'(' func_args ')' // a(e, 99), int(87.6), vector(a^2+b^3+log(c-5), ...
	|	{ '[' expr ']' } // a[7-5][1] или a проверка типов допустит только int
// Функция-приведение vector(a^2+b^3+log(c-5) используется для того, чтобы сравнить полиномы, т. к. два полинома, разделённые знаком (не)равенства образуют уравнение
	
vector =
	'(' func_args ')' [ postfix_func ]
	
func_def_args =
	argument { ',' argument }
	
argument =
		NAME
	|	'.' NAME

func_args =
	bool { ',' bool }

void_func =
		print
	|	add
	|	del
	|	reset
	|	set
	|	help
	|	state
	
print =
	PRINT [ bool ]

add =
		ADD NAME [ '=' bool] // для обычных переменных или полиномов-векторов, получающихся из многочленов, эта переменная может присваивать значение любого примитивного типа.
	|	ADD NAME '(' func_def_args ')' '=' expr // определение ф-ии, например tg(x) = sin(x) '/' cos(x).
		В интерпретаторе для избежания получения значения x используем НОВОЕ ОКРУЖЕНИЕ, содержащее ссылки на подставляемую переменную.
		Если нужно в определении ф-ии получить значение x:
		tg(x) = sin(x) '/' cos(.x) // <- .NAME example here // будет добавлена ф-я tg(x) = sin(x) '/' ЧИСЛО
	
del =
	DEL ( '*' | NAME )
	
reset =
	RESET ( '*' | TABLE | setname )
	
set =
	SET currTok '=' currTok // первый currTok - имя опции(быв. setname), второй - значение
	
help =
	HELP
	
state =
	STATE